let mdtgver = "0.18";

let mdTheme = {
  mdtgVer: mdtgver,
  info: {},
  css: {}
};
let tdCss = "";
let tdCssMin = "";
let tdJs = "";
let tdJsMin = "";

let addHtmlDark = false;

const aboutmessage = `これはMarinDeck for TweetDeck (以下MarinDeck)に搭載されているカスタムテーマの制作を支援するために制作したサイトです。\n
簡単にテーマを作成することができ、開発者に採用された際にもすぐに提出することができます。\n
テーマを制作する際にはカラーコードやpx、%といった単位などのcssを扱う際の最低限の知識が必要です。\n
制作したテーマはMarinDeck内での使用を想定していますが、通常のTweetDeckでも使用することが可能です。\n
このサイトの使用に起因する問題に関して製作者は一切その責任を負いません。ご了承ください。`

function cssInput() {
  tdCss = "";
  Object.keys(mdTheme.css).forEach((key) => {
    if (mdTheme.css[key].length === 0) delete mdTheme.css[key];
    else {
      tdCss = tdCss + `${key}{`
      mdTheme.css[key].forEach((e) => {
        tdCss = tdCss + e;
      })
      tdCss = tdCss + "}\n"
      if (addHtmlDark == true) {
        key = key.split(",");
        let i = 0;
        key.forEach((e) => {
          i++;
          tdCss = tdCss + `html.dark ${e}`;
          i!=key.length&&(tdCss=tdCss+",\n");
        })
        tdCss = tdCss + "{"
        mdTheme.css[key].forEach((e) => {
          tdCss = tdCss + e;
        })
        tdCss = tdCss + "}\n"
      }
    }
  })
  $('.td-preview').contents().find('style').text(tdCss);
  output();
};

function output () {
  $('.td-css-obj').val(JSON.stringify(mdTheme));
  $('.td-css-text').val(`/*!Generated by https://mdtg.sbmr.in v${mdtgver}*/\n${tdCss}`);
  tdCssMin = tdCss.replace(/\r?\n/g, "");
  $('.td-css-text-min').val(`/*!Generated by https://mdtg.sbmr.in v${mdtgver}*/\n${tdCssMin}`);
  tdJs = "(() => {\nconst theme = " + JSON.stringify(mdTheme.info) +";\nconst css = '" + tdCssMin + "';\nconst h = document.documentElement;\nh.classList.add(`md-theme-${theme.suffix}`);\nh.id = theme.suffix;\nh.dataset.mdTheme = `${theme.name}/${theme.version}`;\nconst s = document.createElement('style');\ns.insertAdjacentHTML('beforeend', css);\nh.insertAdjacentElement('beforeend', s)})();";
  $('.td-js').val(`/*!Generated by https://mdtg.sbmr.in v${mdtgver}*/\n${tdJs}`);
  tdJsMin = tdJs.replace(/\r?\n/g, "");
  $('.td-js-min').val(`/*!Generated by https://mdtg.sbmr.in v${mdtgver}*/\n${tdJsMin}`);
}

function cssImport () {
  Object.keys(mdTheme.css).forEach((key) => {
    tdCss = tdCss + `${key}{`
    mdTheme.css[key].forEach((e) => {
      let propVal = e.split(':');
      let prop = propVal[0];
      let val = propVal[1].replace(/;/g, "");
      $(`input[data-sel="${key}"][data-prop="${prop}"]`).val(val);
      tdCss = tdCss + e;
    })
    tdCss = tdCss + "}\n"
  })
  $('.td-preview').contents().find('style').text(tdCss);
  output();
}

function infoImport () {
  Object.keys(mdTheme.info).forEach((key) => {
    $(`input[data-prop="${key}"]`).val(mdTheme.info[key]);
  })
}

function togglemenu () {
  $('#button-menu').toggleClass('anim');
  $('header').toggleClass('menuopen');
}

$(function () {
  $('#mdtg-ver').text(mdtgver);
  $('.td-theme-dark').addClass('displaynone');

  $('input[name="td-theme"]:radio').change(function () {
    let val = $(this).val();
    if (val == 1) {
      $('.td-preview').contents().find('html').addClass('dark');
      /*$('.td-theme-light').addClass('displaynone');
      $('.td-theme-dark').removeClass('displaynone');*/
    } else {
      $('.td-preview').contents().find('html').removeClass('dark');
      /*$('.td-theme-light').removeClass('displaynone');
      $('.td-theme-dark').addClass('displaynone');*/
    }
  });

  $('input#add-html-dark').change(function () {
    if ($(this).prop("checked") == true) {
      addHtmlDark = true;
      cssInput();
    } else {
      addHtmlDark = false;
      cssInput();
    }
  });

  $('input.td-css').change(function () {
    let tdSel = $(this).data('sel');
    let tdProp = $(this).data('prop');
    let val = $(this).val();
    $(`input[data-sel="${tdSel}"][data-prop="${tdProp}"]`).val(val);
    tdSel in mdTheme.css==!1&&(mdTheme.css[tdSel]=[])
    mdTheme.css[tdSel].forEach((e) => {
      if (e.startsWith(`${tdProp}:`)) {
        let index = mdTheme.css[tdSel].indexOf(e)
        mdTheme.css[tdSel].splice(index, 1)
      }
    })
    val&&mdTheme.css[tdSel].push(`${tdProp}:${val};`)
    mdTheme.css[tdSel].sort()
    cssInput();
  });

  $('input.md-theme-info').change(function() {
    $(this).data("prop")=="suffix"&&(mdTheme.info.suffix=$(this).val());
    $(this).data("prop")=="name"&&(mdTheme.info.name=$(this).val());
    $(this).data("prop")=="version"&&(mdTheme.info.version=$(this).val());
    $(this).data("prop")=="author"&&(mdTheme.info.author=$(this).val());
    Object.keys(mdTheme.info).forEach((key) => {
      mdTheme.info[key] == ""&&(delete mdTheme.info[key]);
    });
    output();
  })

  $('input[type="button"].td-css-import').click(function () {
    try {
      let importjson = JSON.parse($('input[type="text"].td-css-import').val());
      if("mdtgVer" in importjson === false) {
        alert("ver0.17.10以前に作られたテーマをインポートしました。\nテーマの詳細情報を入力して下さい。");
        mdTheme.css = importjson;
        cssImport();
      }
      else {
        mdTheme = importjson;
        infoImport();
        cssImport();
      }
      $('input[type="text"].td-css-import').val(null);
    } catch (error) {
      alert("インポートに失敗しました");
      mdTheme = {
        mdtgVer: mdtgver,
        info: {
          suffix: '',
          name: '',
          version: '',
          author: ''
        },
        css: {}
      };
      tdCss = "";
      tdCssMin = "";
      tdJs = "";
      tdJsMin = "";
    }
  });

  $('#open-menu').click(function () {
    togglemenu();
  });

  $('#open-about').click(function () {
    alert(aboutmessage);
  })
});